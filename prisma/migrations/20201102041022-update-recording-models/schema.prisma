generator client {
  provider = "prisma-client-js"
}

///
datasource db {
  provider = "postgresql"
  url = "***"
}

model Exercise {
  createdAt         DateTime            @default(now())
  createdById       String?
  description       String
  formatId          String
  id                String              @id
  name              String
  createdBy         User?               @relation(fields: [createdById], references: [id])
  format            Format              @relation(fields: [formatId], references: [id])
  muscleImpacts     MuscleImpact[]
  setGroups         SetGroup[]
  ExerciseRecording ExerciseRecording[]
}

model SetGroup {
  createdAt         DateTime            @default(now())
  createdById       String?
  id                String              @id
  createdBy         User?               @relation(fields: [createdById], references: [id])
  exercises         Exercise[] // usually will just have 1, but could have multiple to create "super sets"
  defaultNumSets    Int
  SetGroupPlacement SetGroupPlacement[]
  SetGroupRecording SetGroupRecording[]
}

model SetGroupPlacement {
  createdAt        DateTime          @default(now())
  createdById      String?
  createdBy        User?             @relation(fields: [createdById], references: [id])
  id               String            @id
  setGroup         SetGroup          @relation(fields: [setGroupId], references: [id])
  placement        Int
  routineRevisions RoutineRevision[]
  setGroupId       String
}

model RoutineRevision {
  createdAt                DateTime                   @default(now())
  createdById              String?
  id                       String                     @id
  createdBy                User?                      @relation(fields: [createdById], references: [id])
  setGroupPlacements       SetGroupPlacement[]
  Routine                  Routine?                   @relation(fields: [routineId], references: [id])
  routineId                String?
  RoutineRevisionRecording RoutineRevisionRecording[]
}

model RoutineRevisionRecording {
  createdAt          DateTime            @default(now())
  createdById        String
  id                 String              @id
  createdBy          User                @relation(fields: [createdById], references: [id])
  revision           RoutineRevision     @relation(fields: [routineRevisionId], references: [id])
  routineRevisionId  String
  completedSetGroups Int
  setGroupRecordings SetGroupRecording[]
}

model SetGroupRecording {
  createdAt                  DateTime                  @default(now())
  createdById                String
  id                         String                    @id
  createdBy                  User                      @relation(fields: [createdById], references: [id])
  setGroup                   SetGroup                  @relation(fields: [setGroupId], references: [id])
  setGroupId                 String
  setRecordings              SetRecording[]
  completedSets              Int
  RoutineRevisionRecording   RoutineRevisionRecording? @relation(fields: [routineRevisionRecordingId], references: [id])
  routineRevisionRecordingId String?
}

model SetRecording {
  id                  String              @id
  setGroupRecording   SetGroupRecording   @relation(fields: [setGroupRecordingId], references: [id])
  setGroupRecordingId String
  exericseRecordings  ExerciseRecording[]
}

model ExerciseRecording {
  id                   String                @id
  exercise             Exercise              @relation(fields: [exerciseId], references: [id])
  measurableRecordings MeasurableRecording[]
  exerciseId           String
  SetRecording         SetRecording?         @relation(fields: [setRecordingId], references: [id])
  setRecordingId       String?
}

model MeasurableRecording {
  id                  String             @id
  measurable          Measurable         @relation(fields: [measurableId], references: [id])
  value               String
  ExerciseRecording   ExerciseRecording? @relation(fields: [exerciseRecordingId], references: [id])
  exerciseRecordingId String?
  measurableId        String
}

model Routine {
  createdAt        DateTime          @default(now())
  createdById      String?
  id               String            @id
  createdBy        User?             @relation(fields: [createdById], references: [id])
  revisions        RoutineRevision[]
  name             String
  description      String
  cloneOf          Routine?          @relation("RoutineToRoutine", fields: [cloneOfRoutineId], references: [id])
  clones           Routine[]         @relation("RoutineToRoutine")
  cloneOfRoutineId String?
}

model Format {
  createdAt   DateTime     @default(now())
  description String
  id          String       @id
  name        String
  exercises   Exercise[]
  measurables Measurable[]
}

model Measurable {
  id                  String                @id
  name                String
  formats             Format[]
  MeasurableRecording MeasurableRecording[]
}

model Muscle {
  createdAt     DateTime       @default(now())
  description   String
  id            String         @id
  name          String
  muscleImpacts MuscleImpact[]
}

model MuscleImpact {
  id           String     @id
  impactRating Int
  muscleId     String
  muscle       Muscle     @relation(fields: [muscleId], references: [id])
  exercises    Exercise[]
}

model User {
  id                       String                     @id
  password                 String
  username                 String                     @unique
  exercises                Exercise[]
  setGroups                SetGroup[]
  routineRevisions         RoutineRevision[]
  routines                 Routine[]
  SetGroupPlacement        SetGroupPlacement[]
  RoutineRevisionRecording RoutineRevisionRecording[]
  SetGroupRecording        SetGroupRecording[]
}
