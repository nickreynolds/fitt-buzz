type Query {
  info: String!
  feed: [Routine!]
  myRoutines: [Routine!]
  exercises: [Exercise!]
  routine(id: String!): Routine
  routineRevision(id: String!): RoutineRevision
  routineRevisionRecording(id: String!): RoutineRevisionRecording!
  myRoutineRecordings: [RoutineRevisionRecording!]
  myPreviousSetGroupRecording(setGroupId:String!): SetGroupRecording
}

type Mutation {
  createRoutine(name: String!, description: String!, color: String!): Routine!
  createRoutineRevision(
    name: String!
    description: String!
    color: String!
  ): Routine!
  createExercise(
    name: String!
    description: String!
    format: String!
    muscleImpacts: [String!]
  ): Exercise!
  signup(username: String!, password: String!): AuthPayload
  login(username: String!, password: String!): AuthPayload
  cloneRoutineAtRevision(routineId: String!, revisionId: String!): Routine!
  startRoutineRevisionRecording(routineId: String!, revisionId: String!): String
  addExerciseRecording(
    routineRevisionRecordingId: String!
    setGroupId: String!
    setGroupRecordingId: String!
    exerciseRecordingInput: ExerciseRecordingInput!
  ): String
  completeRecording(routineRevisionRecordingId: String!): String
  incrementCompletedSetGroups(routineRevisionRecordingId: String!): String
  incrementCompletedSets(routineRevisionRecordingId: String!): String
}

type Exercise {
  id: ID!
  name: String!
  description: String!
  format: Format!
  createdBy: User!
  muscleImpacts: [MuscleImpact]
}

type MuscleImpact {
  id: ID!
  impactRating: Int!
  muscle: Muscle!
}

type Muscle {
  id: ID!
  name: String!
}

type SetGroupPlacement {
  id: ID!
  setGroup: SetGroup
  placement: Int
}

type SetGroup {
  id: ID!
  exercises: [Exercise]
  defaultNumSets: Int
}

type RoutineRevision {
  id: ID!
  setGroupPlacements: [SetGroupPlacement]
  routine: Routine!
}

type Routine {
  id: ID!
  description: String!
  name: String!
  revisions: [RoutineRevision]
  createdBy: User
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  username: String!
  routines: [Routine!]!
}

type RoutineRevisionRecording {
  id: ID!
  createdAt: String!
  routineRevision: RoutineRevision!
  completedSetGroups: Int!
  setGroupRecordings: [SetGroupRecording!]
  recordingCompleted: Boolean
}

type SetGroupRecording {
  id: ID!
  setGroup: SetGroup
  setGroupId: ID!
  completedSets: Int!
  setRecordings: [SetRecording!]
}

type SetRecording {
  id: ID!
  completedExercises: Int!
  exerciseRecordings: [ExerciseRecording!]
}

type ExerciseRecording {
  id: ID!
  exercise: Exercise
  measurableRecordings: [MeasurableRecording!]
}

input ExerciseRecordingInput {
  exerciseID: ID!
  measurableRecordings: [MeasurableRecordingInput!]
}

input MeasurableRecordingInput {
  measurableID: ID!
  value: String
}

type MeasurableRecording {
  id: ID!
  measurable: Measurable
  value: String
}

type Measurable {
  id: ID!
  name: String
  formats: [Format]
}

type Format {
  id: ID!
  description: String
  name: String
  measurables: [Measurable]
}
